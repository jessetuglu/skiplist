{"version":3,"sources":["skiplist/SkipListNode.ts","skiplist/SkipListC.ts","visuals/tsx/Node.tsx","visuals/tsx/Grid.tsx","visuals/tsx/App.tsx","index.tsx"],"names":["type","SkipListNode","prevs","nexts","key","val","nodeType","this","root","n2","cap","compareTo","key2","length","str","i","currentNode","rows","col","push","SkipListC","p","Math","E","n","start","terminus","height","animations","curr","animation","c1","c2","getType","isLessKey","equals","element","res","search","getValue","node","b","a","levels","increase","newNode","undefined","back","isLess","front","random","tmp","cols","j","k","console","log","to2DArray","toString","getColor","setText","getKey","Node","props","r","c","id","className","style","backgroundColor","Grid","sl","max","min","state","size","slArray","search_key","search_result","onChangeVal","bind","handleSearch","animate","e","preventDefault","setState","target","name","value","renderList","slice","reverse","map","row","rindex","cindex","setTimeout","document","getElementById","get","floor","insert","_","colIndex","skipGrid","onChange","onClick","placeholder","ref","React","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d3655314.chunk.js","sourcesContent":["export enum type{\n    root,\n    node,\n    cap,\n}\n\nexport class SkipListNode{\n    public prevs: SkipListNode[];\n    public nexts: SkipListNode[];\n    private key: number | null;\n    private val: number | null;\n    private type: type;\n\n    constructor(prevs?: null, nexts?: null, key?: number | null, val?: number | null, nodeType?: type) {\n        this.prevs = prevs || [];\n        this.nexts = nexts || [];\n        this.key = key || null;\n        this.val = val || null;\n        this.type = nodeType || type.root;\n    }\n\n    private compareTo(n2: number | null): number{\n        // @ts-ignore\n        if (this.key > n2){\n            return 1;\n        }\n        else { // @ts-ignore\n            if(this.key < n2){\n                        return -1;\n                    }\n        }\n        return 0;\n    }\n\n\n    public isLess(n2: SkipListNode): boolean{\n        if (this.type === type.root){\n            return true;\n        }\n        else if (this.type === type.cap){\n            return false;\n        }\n        return this.compareTo(n2.key) < 0;\n    }\n\n    public isLessKey(key: number): boolean{\n        if (this.type === type.root)\n            return true;\n        else if (this.type === type.cap)\n            return false;\n        else\n            { // @tsx-ignore\n                return this.compareTo(key) < 0;\n            }\n    }\n\n    public equals(key2: number): boolean{\n        if (this.key == null){\n            return false\n        }\n        return this.compareTo(key2) === 0;\n    }\n\n    public height(): number{\n        return this.nexts.length;\n    }\n\n    public toString(): string{\n        let str: string = \"\";\n\n        for (let i:number = this.nexts.length - 1; i >= 0; i--) {\n            let currentNode: SkipListNode = this;\n\n            while (currentNode.type !== type.cap) {\n                str += \"{\" + currentNode.key + \", \" + currentNode.val + \"} --> \";\n                currentNode = currentNode.nexts[i];\n            }\n            str += \"\\n\";\n        }\n\n        return str;\n    }\n\n    public getType():type{\n        return this.type;\n    }\n\n    public getValue():(number | null){\n        return this.val;\n    }\n\n    public getKey():(number | null){\n        return this.key;\n    }\n\n    public to2DArray(): (SkipListNode[][]) {\n        let rows: SkipListNode[][] = [];\n\n        for (let i: number = this.nexts.length - 1; i >= 0; i--) {\n            let currentNode: SkipListNode = this;\n            let col: SkipListNode[] = [];\n            while (currentNode.type !== type.cap) {\n                col.push(currentNode);\n                currentNode = currentNode.nexts[i];\n            }\n            col.push(currentNode);\n            rows.push(col);\n        }\n        return rows;\n    }\n}\n","import {SkipListNode, type} from \"./SkipListNode\";\nimport {animationJson, GetMethodResult, SearchMethodResult, SkipList} from \"./SkipList\";\n\nexport class SkipListC implements SkipList{\n    private p: number = 1 / Math.E;\n    private n: number;\n    private start: SkipListNode;\n    private terminus: SkipListNode;\n    private height:number;\n\n    public animations:animationJson[]=[];\n\n    constructor() {// implement this insert array method later if time\n        this.start = new SkipListNode(null, null, null, null, type.root);\n        this.terminus = new SkipListNode(null, null, null, null, type.cap);\n        this.height = 1;\n        this.n = 0;\n    }\n\n    private search(key: number): SearchMethodResult {\n        this.animations = [];\n        let curr: SkipListNode = this.start;\n        let i: number = this.start.height() - 1;\n        let animation:animationJson = {c1: curr, c2: null, \"slState\": this};\n        this.animations.push(animation);\n\n        while(curr.getType() !== type.cap && i >= 0){\n            if (curr.nexts[i].isLessKey(key)){\n                curr = curr.nexts[i];\n            }\n            else if (curr.nexts[i].equals(key)){\n                let animation:animationJson = {c1: curr, c2: curr.nexts[i],\"slState\": this};\n                this.animations.push(animation);\n                return {element: curr.nexts[i], animations: this.animations};\n            }\n            else{\n                i -= 1;\n            }\n            let animation:animationJson = {c1: curr, c2: null, \"slState\": this};\n            this.animations.push(animation);\n        }\n        return {element: null, animations: this.animations}\n    }\n\n    public get(key: number): GetMethodResult {\n        let res = this.search(key);\n        return {val: res.element?.getValue() || null, animations:res.animations};\n    }\n\n    public delete(key: number): ({}[]) {\n        let res: SearchMethodResult = this.search(key);\n        let node: SkipListNode | null = res.element;\n        if (node == null){\n            return res.animations;\n        }\n        this.animations = [];\n        for (let i: number = 0; i < node.nexts.length; i++){\n            let b: SkipListNode  = node.prevs[i];\n            let a: SkipListNode  = node.nexts[i];\n            b.nexts[i] = a;\n            a.prevs[i] = b;\n        }\n        this.n -= 1;\n        return [];\n    }\n\n\n    public insert(key: number, val: number): void {\n        this.animations = [];\n        let levels: number = this.levels();\n\n        this.increase(levels);\n\n\n        let newNode: SkipListNode  = new SkipListNode(undefined, undefined, key, val, type.node);\n        for (let i: number = 0; i < levels; i++){\n            newNode.nexts[i] = new SkipListNode(undefined, undefined, undefined, undefined, type.node)\n            newNode.prevs[i] = new SkipListNode(undefined, undefined, undefined, undefined, type.node)\n        }\n\n        let i: number = levels - 1;\n\n        while (i >= 0){\n            let back: SkipListNode = this.start;\n\n            while (i< back.height() && back.nexts[i] !== this.terminus && back.nexts[i].isLess(newNode)){\n                back = back.nexts[i];\n            }\n\n            let front: SkipListNode = this.terminus;\n\n            if (back.nexts[i] != null){\n                front = back.nexts[i];\n            }\n\n            newNode.prevs[i] = back;\n            back.nexts[i] = newNode;\n\n\n            newNode.nexts[i] = front;\n            front.prevs[i] = newNode;\n\n            i -= 1;\n        }\n        this.n += 1;\n    }\n\n    private levels():number{\n        if (Math.random() < this.p){\n            return 1 + this.levels();\n        }\n        return 1;\n    }\n\n    private increase(levels: number):void{\n        while (levels > this.start.height()){\n            this.start.nexts.push(new SkipListNode(null, null, null, null, type.root));\n            this.terminus.prevs.push(new SkipListNode(null, null, null, null, type.cap));\n\n            this.start.nexts[this.start.nexts.length - 1] = this.terminus;\n            this.terminus.prevs[this.terminus.prevs.length - 1] = this.start;\n        }\n    }\n\n\n    public to2DArray(): SkipListNode[][]{ // we arent updating node's next fields to include\n        let i: number = 0;\n        let tmp: SkipListNode = this.start;\n        let cols: SkipListNode[][] = [];\n        while (i <= this.n){\n            let col: SkipListNode[] = [];\n            for (let j : number = 1; j<=tmp.height(); j++){\n                col.push(tmp);\n            }\n            tmp = tmp.nexts[0];\n            cols.push(col);\n            i++;\n        }\n        let col: SkipListNode[] = [];\n        for (let k:number = 1; k <= this.start.nexts.length; k++){\n            col.push(tmp);\n        }\n        cols.push(col)\n        console.log(this.start.to2DArray())\n        return cols;\n    }\n\n    public toString(): string {\n        return this.start.toString();\n    }\n\n    public size(): number {\n        return this.n;\n    }\n\n    public isEmpty(): boolean {\n        return this.n === 0;\n    }\n}","import React from 'react';\nimport '../styles/main.scss';\nimport {SkipListNode} from \"../../skiplist/SkipListNode\";\nimport {type} from '../../skiplist/SkipListNode';\n\n\ninterface nodeProps{\n    node: SkipListNode | undefined;\n    r: number;\n    c: number;\n}\n\nfunction getColor(node: SkipListNode){\n    switch (node.getType()){\n        case type.cap:\n            return `red`;\n        case type.node:\n            return `transparent`\n        case type.root:\n            return `green`;\n    }\n}\n\nfunction setText(node: SkipListNode){\n    switch (node.getType()){\n        case type.root:\n            return `ROOT`;\n        case type.node:\n            return `K:${node.getKey()}\\nV:${node.getValue()}`\n        case type.cap:\n            return `CAP`;\n    }\n}\n\nfunction setNode(node: SkipListNode | undefined, r:number, c: number): (JSX.Element){\n    if (node === undefined){\n        return (\n            <div id={`null-${r}-${c}`} className={\"node-square\"} style={{backgroundColor: `transparent`}}>\n                <br className={\"modified-b\"}/>\n                <p className={\"node-square__text\"}>===={'>'}</p>\n            </div>\n        )\n    }\n    return (\n        <div id={`node-${node.getKey()}`} className={`node-square node-${r}-${c}`} style={{backgroundColor:getColor(node)}}>\n            <p className={\"node-square__text\"}>{setText(node)}</p>\n        </div>\n    )\n}\n\nconst Node = (props: nodeProps) =>{\n    return (\n        setNode(props.node, props.r,props.c)\n    )\n}\n\nexport default Node;","import React from \"react\";\nimport {SkipListC} from \"../../skiplist/SkipListC\";\nimport Node from './Node';\nimport {SkipListNode, type} from \"../../skiplist/SkipListNode\";\nimport {GetMethodResult} from \"../../skiplist/SkipList\";\n\n\nclass Grid extends React.Component<any, any>{\n    private sl: SkipListC;\n    private max = 30; // max/min # of insertions\n    private min = 5;\n\n    constructor(props:any) {\n        super(props);\n        this.sl = new SkipListC();\n        this.state = {size:5, slArray: [], search_key:null, search_result:null, animations: []}\n        this.onChangeVal = this.onChangeVal.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.animate = this.animate.bind(this);\n    }\n\n    onChangeVal(e: any){\n        e.preventDefault();\n        this.setState({[e.target.name] : e.target.value, animations:[], search_result: null});\n    }\n\n    componentDidMount() {\n        this.renderList();\n    }\n    skipGrid(){\n        return this.state.slArray.slice(0).reverse().map((row: SkipListNode[], rindex: number) => {\n            return (\n                <div className={\"row m-0 p-0 justify-content-center\"}>\n                    {\n                        row.map((col: SkipListNode, cindex: number) => {\n                            return (\n                                <div className={\"col-auto p-0 m-0\"}><Node node={col} r={rindex} c={cindex}/></div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        })\n    }\n\n    animate(res: GetMethodResult){\n        for (let i: number = 0; i < res.animations.length; i++){\n            setTimeout(()=> {\n                let animation: {} = res.animations[i];\n                // @ts-ignore\n                if (animation[\"c1\"] !== null){\n                    // @ts-ignore\n                    var element = document.getElementById(`node-${animation[\"c1\"].getKey()}`);\n                    if (element !== null) element.style.backgroundColor = `purple`;\n                }\n                // @ts-ignore\n                if (animation[\"c2\"] !== null){\n                    // @ts-ignore\n                    var element = document.getElementById(`node-${animation[\"c2\"].getKey()}`);\n                    if (element !== null) element.style.backgroundColor = `blue`;\n                }\n            }, 200 * i);\n        }\n        this.setState({search_result: res.val === null ? \"No Value Found\": res.val});\n    }\n\n    handleSearch(){\n        console.log(\"Should have updated the sl\");\n        let res: GetMethodResult = this.sl.get(this.state.search_key);\n        this.animate(res);\n        this.setState({search_key: null});\n    }\n\n    renderList(){\n        this.sl = new SkipListC();\n        for (let i: number = 0; i < this.state.size; i++){\n            let key: number = Math.floor(Math.random() * 100);\n            while (key === 0 || this.sl.get(key).val !== null){// dont render 0 as there is weird tsx error.\n                key = Math.floor(Math.random() * 100); // allow for a speedier animation, gaurantee unique\n            }\n            this.sl.insert(key, key);\n        }\n        let res: SkipListNode[][] = this.sl.to2DArray();\n        this.setState({slArray:res[0].map((_, colIndex) => res.map(row => row[colIndex]))}); // transpose rows to cols LA!\n        return this.skipGrid();\n    }\n\n    render(){\n        return(\n            <div>\n                <div className={\"skiplist-form\"}>\n                    <h4>Graph Params</h4>\n\n                    <label>Number of Elements: {this.state.size}(20+ for larger screens)</label><br/>\n\n                    {this.min}<input type=\"range\" name=\"size\" className=\"skiplist-form__range\" id=\"range\" onChange={this.onChangeVal} value={this.state.size} max={this.max} min={this.min}/>{this.max}<br/>\n\n                    <button className={\"btn btn-dark\"} onClick={() => {this.sl = new SkipListC(); this.renderList()}}>Build</button><br/>\n\n                    <label>Search For An Element</label><br/>\n\n                    <small className={\"color-box-purple\"}>Purple: Path</small><br/>\n\n                    <small className={\"color-box-blue\"}>Blue: Element(if any)</small><br/><br/>\n\n                    <input type={\"number\"} name={\"search_key\"} value={this.state.search_key} onChange={this.onChangeVal} placeholder={\"Enter Key Here.\"}/>\n\n                    <button className={\"btn btn-dark\"} onClick={this.handleSearch}>Search</button><br/>\n\n                    <label>{this.state.search_key === \"\" && this.state.search_result === null ? \"\": \"Search Result: \" + this.state.search_result}</label><br/><br/><br/>\n                </div>\n                <div ref=\"skiplist\" className={\"container-xxl mx-auto skiplist\"}>\n                    {this.skipGrid()}\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Grid;","import React from 'react';\nimport '../styles/main.scss';\n\nimport Grid from \"./Grid\";\n\nclass App extends React.Component<any, any>{\n    render(){\n        return (\n            <div>\n                <nav className={\"header\"}>\n                    <h2>Skip Lists by Cole Dumas and Jesse Tuglu</h2>\n                </nav>\n                <Grid/>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './visuals/tsx/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}